{"version":3,"sources":["components/Header.js","components/Form.js","components/Display.js","App.js","index.js"],"names":["Header","icon","faCommentsDollar","Form","getTweets","useState","symbols","setSymbols","numTweets","setNumTweets","textBoxRef","useRef","className","onSubmit","e","preventDefault","current","focus","handleSubmit","ref","type","name","value","onChange","target","required","Display","tweet","key","id","user","username","body","App","tweets","setTweets","addTweets","title","messages","newTweets","a","async","axios","get","headers","crossdomain","res","data","symbol","alert","toUpperCase","console","log","map","obj","index","length","onClick","splice","removeTweets","ReactDOM","render","document","getElementById"],"mappings":"sPAceA,EAVA,WACb,OACE,gCACE,4BACE,kBAAC,IAAD,CAAiBC,KAAMC,MADzB,cC+CSC,EAnDF,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EACAC,mBAAS,IADT,mBACvBC,EADuB,KACdC,EADc,OAEIF,mBAAS,IAFb,mBAEvBG,EAFuB,KAEZC,EAFY,KAGxBC,EAAaC,iBAAO,MAU1B,OACE,kBAAC,WAAD,KACE,0BAAMC,UAAU,YAAYC,SAAU,SAAAC,GAAC,OAVtB,SAAAA,GACnBA,EAAEC,iBACFX,EAAUE,EAASE,GACnBD,EAAW,IACXE,EAAa,IACbC,EAAWM,QAAQC,QAK0BC,CAAaJ,KACtD,6BACE,wBAAIF,UAAU,eAAd,yCACA,2BACEO,IAAKT,EACLE,UAAU,kBACVQ,KAAK,OACLC,KAAK,UACLC,MAAOhB,EACPiB,SAAU,SAAAT,GAAC,OAAIP,EAAWO,EAAEU,OAAOF,QACnCG,UAAQ,IAEV,+DAEF,6BACE,wBAAIb,UAAU,eAAd,uCACA,2BACEA,UAAU,iBACVQ,KAAK,OACLC,KAAK,YACLC,MAAOd,EACPe,SAAU,SAAAT,GAAC,OAAIL,EAAaK,EAAEU,OAAOF,QACrCG,UAAQ,IAEV,wEAEF,2BAAOL,KAAK,SAASR,UAAU,WC3BxBc,EAdC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACjB,OACE,yBAAKC,IAAKD,EAAME,GAAIjB,UAAU,mBAC5B,wBAAIA,UAAU,cAAce,EAAMG,KAAKT,MACvC,wBAAIT,UAAU,kBAAd,IAAiCe,EAAMG,KAAKC,UAC5C,uBAAGnB,UAAU,cAAce,EAAMK,Q,uBC2ExBC,MA5Ef,WAAgB,IAAD,EACe5B,mBAAS,IADxB,mBACN6B,EADM,KACEC,EADF,KAwBPC,EAAY,SAACC,EAAOC,GACxB,IAAMC,EAAS,CAAI,CAAEF,MAAOA,EAAOH,OAAQI,IAA5B,mBAA2CJ,IAC1DC,EAAUI,IAuBZ,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,0BAAM3B,UAAU,aACd,kBAAC,EAAD,CAAMR,UAlDM,SAAOE,EAASE,GAAhB,eAAAgC,EAAAC,OAAA,2EAAAD,EAAA,MAEIE,IAAMC,IAAN,0DACmCrC,EADnC,uBACyDE,GACzE,CACEoC,QAAS,CACP,eAAgB,mBAChB,yBAA0B,YAG9B,CAAEC,aAAa,KAVH,OAERC,EAFQ,OAYdV,EAAUU,EAAIC,KAAKC,OAAOX,MAAOS,EAAIC,KAAKT,UAZ5B,gDAcdW,MAAM,IAAD,OACC3C,EAAQ4C,cADT,oDAGLC,QAAQC,IAAR,MAjBc,2DAmDXlB,EAAOmB,KAAI,SAACC,EAAKC,GAAN,OACV,6BAAS3B,IAAK2B,GACZ,wBAAI3C,UAAU,iBAAiB0C,EAAIjB,OACnC,uBAAGzB,UAAU,iBAAb,yBACqB0C,EAAIpB,OAAOsB,OADhC,wBAGA,2BACEpC,KAAK,SACLE,MAAM,SACNV,UAAU,aACV6C,QAAS,kBAnCA,SAAAF,GACnB,IAAMhB,EAAS,YAAOL,GACtBK,EAAUmB,OAAOH,EAAO,GACxBpB,EAAUI,GAgCeoB,CAAaJ,MAE7BD,EAAIpB,OAAOmB,KAAI,SAAA1B,GAAK,OACnB,kBAAC,EAAD,CAASC,IAAKD,EAAME,GAAIF,MAAOA,cCtE7CiC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.91dc43e6.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCommentsDollar } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>\n        <FontAwesomeIcon icon={faCommentsDollar} /> stocker\n      </h1>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { Fragment, useState, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Form = ({ getTweets }) => {\n  const [symbols, setSymbols] = useState(\"\");\n  const [numTweets, setNumTweets] = useState(\"\");\n  const textBoxRef = useRef(null);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    getTweets(symbols, numTweets);\n    setSymbols(\"\");\n    setNumTweets(\"\");\n    textBoxRef.current.focus();\n  };\n\n  return (\n    <Fragment>\n      <form className=\"form-form\" onSubmit={e => handleSubmit(e)}>\n        <div>\n          <h4 className=\"form-header\">Please enter the desired stock symbol</h4>\n          <input\n            ref={textBoxRef}\n            className=\"text-form-field\"\n            type=\"text\"\n            name=\"symbols\"\n            value={symbols}\n            onChange={e => setSymbols(e.target.value)}\n            required\n          />\n          <small>e.g. AAPL, GOOG, MSFT, TSLA</small>\n        </div>\n        <div>\n          <h4 className=\"form-header\">Please enter # of tweets to display</h4>\n          <input\n            className=\"num-form-field\"\n            type=\"text\"\n            name=\"numTweets\"\n            value={numTweets}\n            onChange={e => setNumTweets(e.target.value)}\n            required\n          />\n          <small>The maximum per request is 30 tweets</small>\n        </div>\n        <input type=\"submit\" className=\"btn\" />\n      </form>\n    </Fragment>\n  );\n};\n\nForm.propTypes = {\n  getTweets: PropTypes.func.isRequired,\n};\n\nexport default Form;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Display = ({ tweet }) => {\n  return (\n    <div key={tweet.id} className=\"tweet-container\">\n      <h4 className=\"tweet-name\">{tweet.user.name}</h4>\n      <h5 className=\"tweet-username\">@{tweet.user.username}</h5>\n      <p className=\"tweet-body\">{tweet.body}</p>\n    </div>\n  );\n};\n\nDisplay.propTypes = {\n  tweet: PropTypes.object.isRequired,\n};\n\nexport default Display;\n","import React, { Fragment, useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Form from \"./components/Form\";\nimport Display from \"./components/Display\";\nimport axios from \"axios\";\nimport \"./styles.css\";\n\nfunction App() {\n  const [tweets, setTweets] = useState([]);\n\n  const getTweets = async (symbols, numTweets) => {\n    try {\n      const res = await axios.get(\n        `https://api.stocktwits.com/api/2/streams/symbol/${symbols}.json?limit=${numTweets}`,\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-Content-Type-Options\": \"nosniff\",\n          },\n        },\n        { crossdomain: true }\n      );\n      addTweets(res.data.symbol.title, res.data.messages);\n    } catch (err) {\n      alert(\n        `\"${symbols.toUpperCase()}\" not found. Please enter a valid stock symbol.`\n      );\n      console.log(err);\n    }\n  };\n\n  const addTweets = (title, messages) => {\n    const newTweets = [{ title: title, tweets: messages }, ...tweets];\n    setTweets(newTweets);\n  };\n\n  const removeTweets = index => {\n    const newTweets = [...tweets];\n    newTweets.splice(index, 1);\n    setTweets(newTweets);\n  };\n\n  // @todo - attempting to set up an automatic refresh\n\n  // useEffect((symbols, numTweets) => {\n  //   const interval = setInterval(tweets => {\n  //     if (tweets === undefined) {\n  //       console.log(\"Stopped\");\n  //       console.log(tweets);\n  //       return;\n  //     }\n  //     getTweets(symbols, numTweets);\n  //   }, 5000);\n  //   return () => clearInterval(interval);\n  // });\n\n  return (\n    <Fragment>\n      <Header />\n      <main className=\"container\">\n        <Form getTweets={getTweets} />\n        {tweets.map((obj, index) => (\n          <section key={index}>\n            <h2 className=\"section-title\">{obj.title}</h2>\n            <p className=\"section-intro\">\n              {`Displaying the ${obj.tweets.length} most recent tweets`}\n            </p>\n            <input\n              type=\"submit\"\n              value=\"REMOVE\"\n              className=\"remove-btn\"\n              onClick={() => removeTweets(index)}\n            />\n            {obj.tweets.map(tweet => (\n              <Display key={tweet.id} tweet={tweet} />\n            ))}\n          </section>\n        ))}\n      </main>\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}